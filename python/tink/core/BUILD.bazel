load("@rules_python//python:defs.bzl", "py_library")
load("@tink_py_pip_deps//:requirements.bzl", "requirement")

package(default_visibility = ["//:__subpackages__"])

py_library(
    name = "core",
    srcs = ["__init__.py"],
    deps = [
        ":crypto_format",
        ":key_manager",
        ":keyset_reader",
        ":keyset_writer",
        ":primitive_set",
        ":primitive_wrapper",
        ":registry",
        ":tink_error",
        "//tink/aead:aead_primitive",
        "//tink/proto:tink_py_pb2",
    ],
)

py_library(
    name = "key_manager",
    srcs = ["key_manager.py"],
    deps = [
        ":tink_error",
        "//tink/proto:tink_py_pb2",
    ],
)

py_library(
    name = "tink_error",
    srcs = ["tink_error.py"],
    deps = [
        "//tink/cc/pybind:status",
    ],
)

py_library(
    name = "registry",
    srcs = ["registry.py"],
    deps = [
        ":key_manager",
        ":primitive_set",
        ":primitive_wrapper",
        ":tink_error",
        "//tink/proto:tink_py_pb2",
    ],
)

py_test(
    name = "registry_test",
    srcs = ["registry_test.py"],
    deps = [
        ":core",
        requirement("absl-py"),
        "//tink/aead",
        "//tink/mac",
        "//tink/proto:tink_py_pb2",
        "//tink/testing:helper",
    ],
)

py_library(
    name = "crypto_format",
    srcs = ["crypto_format.py"],
    deps = [
        ":tink_error",
        "//tink/proto:tink_py_pb2",
    ],
)

py_test(
    name = "crypto_format_test",
    srcs = ["crypto_format_test.py"],
    deps = [
        ":core",
        ":crypto_format",
        requirement("absl-py"),
        "//tink/proto:tink_py_pb2",
    ],
)

py_library(
    name = "keyset_reader",
    srcs = ["keyset_reader.py"],
    deps = [
        ":tink_error",
        requirement("six"),
        "//tink/proto:tink_py_pb2",
    ],
)

py_test(
    name = "keyset_reader_test",
    srcs = ["keyset_reader_test.py"],
    deps = [
        ":core",
        requirement("absl-py"),
        "//tink/proto:tink_py_pb2",
    ],
)

py_library(
    name = "primitive_set",
    srcs = ["primitive_set.py"],
    deps = [
        ":crypto_format",
        ":tink_error",
        "//tink/proto:tink_py_pb2",
    ],
)

py_test(
    name = "primitive_set_test",
    srcs = ["primitive_set_test.py"],
    deps = [
        ":core",
        ":crypto_format",
        requirement("absl-py"),
        "//tink/aead",
        "//tink/mac",
        "//tink/proto:tink_py_pb2",
        "//tink/testing:helper",
    ],
)

py_library(
    name = "primitive_wrapper",
    srcs = ["primitive_wrapper.py"],
    deps = [
        ":primitive_set",
        requirement("six"),
    ],
)

py_library(
    name = "keyset_writer",
    srcs = ["keyset_writer.py"],
    deps = [
        ":tink_error",
        requirement("six"),
        "//tink/proto:tink_py_pb2",
    ],
)

py_test(
    name = "keyset_writer_test",
    srcs = ["keyset_writer_test.py"],
    deps = [
        ":core",
        requirement("absl-py"),
        "//tink/proto:tink_py_pb2",
    ],
)

py_library(
    name = "cleartext_keyset_handle",
    srcs = ["cleartext_keyset_handle.py"],
    visibility = ["//visibility:public"],
    deps = [
        ":core",
        "//tink:tink_python",
        "//tink/proto:tink_py_pb2",
    ],
)

py_test(
    name = "cleartext_keyset_handle_test",
    srcs = ["cleartext_keyset_handle_test.py"],
    deps = [
        ":cleartext_keyset_handle",
        ":core",
        requirement("absl-py"),
        "//tink:tink_python",
        "//tink:tink_config",
        "//tink/mac",
    ],
)
